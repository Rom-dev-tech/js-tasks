import '../sass/modul12.scss';

// –ú–∞—Å—Å–∏–≤ –õ–æ—à–∞–¥–µ–π
const horses = ['Secretariat', 'Eclipse', 'West Australian', 'Flying Fox', 'Seabiscuit'];

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –∑–∞–µ–∑–¥–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
let raceCounter = 0;

// –†–µ—Ñ—ã
const refs = {
  startBtn: document.querySelector('.js-start-race'),
  winnerField: document.querySelector('.js-winner'),
  progressField: document.querySelector('.js-progress'),
  tableBody: document.querySelector('.js-results-table > tbody'),
};

// –°–ª—É—à–∞—Ç–µ–ª—å –Ω–∞ –∫–Ω–æ–ø–∫—É
refs.startBtn.addEventListener('click', onStart);

// –°—Ç–∞—Ä—Ç
function onStart() {
  raceCounter += 1;
  const promises = horses.map(run);

  updateWinnerField('');
  updateProgressField('ü§ñ –ó–∞–µ–∑–¥ –Ω–∞—á–∞–ª—Å—è, —Å—Ç–∞–≤–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è!');
  determineWinner(promises);
  waitForAll(promises);
}

// * Promise.race([]) –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–∏–≤—à–µ–≥–æ—Å—è –ø—Ä–æ–º–∏—Å–∞
function determineWinner(horsesP) {
  Promise.race(horsesP).then(({ horse, time }) => {
    updateWinnerField(`üéâ –ü–æ–±–µ–¥–∏–ª ${horse}, —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–≤ –∑–∞ ${time}
    –≤—Ä–µ–º–µ–Ω–∏`);
    updateResultsTable({ horse, time, raceCounter });
  });
}

// * Promise.all([]) –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–º–∏—Å–æ–≤
function waitForAll(horsesP) {
  Promise.all(horsesP).then(() => {
    updateProgressField('üìù –ó–∞–µ–∑–¥ –æ–∫–æ–Ω—á–µ–Ω, –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å—Ç–∞–≤–∫–∏.');
  });
}

// –û–±–Ω–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
function updateWinnerField(message) {
  refs.winnerField.textContent = message;
}

// –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function updateProgressField(message) {
  refs.progressField.textContent = message;
}

// –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–±–µ–≥—É –≤ —Ç–∞–±–ª–∏—Ü—É
function updateResultsTable({ horse, time, raceCounter }) {
  const tr = `<tr><td>${raceCounter}</td><td>${horse}</td><td>${time}</td></tr>`;
  refs.tableBody.insertAdjacentHTML('beforeend', tr);
}

// –ü—Ä–æ–º–∏—Å –¥–ª—è –æ–¥–Ω–æ–π –ª–æ—à–∞–¥–∏ (—Å–æ–∑–¥–∞—ë—Ç –ø—Ä–æ–º–∏—Å)
function run(horse) {
  return new Promise(resolve => {
    const time = getRandomTime(2000, 3500);

    setTimeout(() => {
      resolve({ horse, time });
    }, time);
  });
}

// –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
function getRandomTime(min, max) {
  return Math.floor(Math.random() * (max - min + 1) + min);
}
